<?xml version="1.0" encoding="UTF-8"?>

<project name="papaya Project" default="build">

  <property name="directory.export" value="./build" override="true"/>
  <property name="directory.src" value="${project.basedir}" override="true"/>
  <property name="directory.document-root" value="${directory.src}/htdocs" override="true"/>

  <property name="mode.writeable" value="0777" override="true"/>

  <property file="dist.build.properties" prefix="configuration" override="true"/>
  <property file="build.properties" prefix="configuration" override="true"/>

  <property name="executable.composer" value="${configuration.executable.composer}" override="true"/>
  <property name="executable.git" value="${configuration.executable.git}" override="true"/>

  <property name="database.uri" value="${configuration.database.uri}" override="true"/>
  <property name="dist.database.uri" value="${configuration.dist.database.uri}" override="true"/>

  <property name="revision.project" value="" override="true"/>

  <fileset id="public" dir="${directory.document-root}">
    <include name="**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="conf.inc.php"/>
    <exclude name="papaya/**"/>
  </fileset>

  <fileset id="source" dir="${directory.src}">
    <include name="src/**"/>
    <include name="composer.json"/>
    <include name="composer.lock"/>
    <exclude name="templates/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.git/**"/>
  </fileset>

  <fileset id="dependencies" dir="${directory.src}">
    <include name="dependencies-install.json"/>
    <include name="dependencies-install.lock"/>
  </fileset>

  <fileset id="archives" dir="${directory.export}">
    <include name="*.tar.gz"/>
    <include name="*.zip"/>
  </fileset>

  <target name="build" depends="dependencies-install,config,prepare" description="Install/Configure"/>



  <!--
    Install dependencies-install dependencies
   -->
  <target name="dependencies-install" depends="composer-install,fetch-revisions" description="Install dependencies"/>
  <target name="composer-install" hidden="true">
    <exec executable="${executable.composer}" passthru="true">
      <arg value="-n"/>
      <arg value="install"/>
    </exec>
  </target>

  <!--
    Update dependencies-install dependencies
   -->
  <target name="dependencies-update" depends="composer-update,fetch-revisions" description="Update dependencies"/>
  <target name="composer-update" hidden="true">
    <exec executable="${executable.composer}" passthru="true">
      <arg value="-n"/>
      <arg value="update"/>
    </exec>
  </target>

  <!--
    Configure working copy
   -->
  <target name="config" description="Generate configuration">
    <property name="config.template" value="${directory.src}/dist.papaya.php"/>
    <property name="config.file" value="${directory.src}/papaya.php"/>
    <property name="papaya.database.uri" value="${database.uri}"/>
    <property name="papaya.development.active" value="(bool)TRUE"/>
    <if>
      <not>
        <available file="${config.file}"/>
      </not>
      <then>
        <copy file="${config.template}" tofile="${config.file}">
          <filterchain>
            <expandproperties/>
          </filterchain>
        </copy>
      </then>
      <else>
        <warn message="papaya.php already exists. Skipped."/>
      </else>
    </if>
  </target>

  <target name="config-remove" description="Remove configuration" hidden="true">
    <property name="config.file" value="${directory.src}/papaya.php"/>
    <delete file="${config.file}"/>
  </target>

  <target name="config-regenerate" depends="config-remove,config" description="Regenerate configuration"/>

  <!--
    Generate directory with date
  -->
  <target name="export-directory" depends="export" description="Create distribution directory">
    <copy todir="${directory.export}/${revision.project}">
      <fileset dir="${directory.export}/source">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <!--
    Generate tar.gz archive
  -->
  <target name="export-tgz" depends="export" description="Create tar.gz archive">
    <tar destfile="${directory.export}/latest.tar.gz" compression="gzip">
      <fileset dir="${directory.export}/source">
        <include name="*"/>
      </fileset>
    </tar>
    <copy
      file="${directory.export}/latest.tar.gz"
      tofile="${directory.export}/build-${revision.project}.tar.gz">
    </copy>
  </target>

  <!--
    Generate zip archive
  -->
  <target name="export-zip" depends="export" description="Create zip archive">
    <zip destfile="${directory.export}/latest.zip">
      <fileset dir="${directory.export}/source">
        <include name="*"/>
      </fileset>
    </zip>
    <copy
      file="${directory.export}/latest.zip"
      tofile="${directory.export}/build-${revision.project}.zip">
    </copy>
  </target>

  <target name="clean-build" description="Remove build data">
    <delete dir="${directory.export}/source"/>
  </target>

  <target name="clean-archives" description="Remove exported archives">
    <delete>
      <fileset refid="archives"/>
    </delete>
  </target>



  <target name="prepare" description="Generate directories" hidden="true">
    <mkdir dir="${directory.src}/papaya-data/cache" mode="${mode.writeable}"/>
    <mkdir dir="${directory.src}/papaya-data/media/files" mode="${mode.writeable}"/>
    <mkdir dir="${directory.src}/papaya-data/media/thumbs" mode="${mode.writeable}"/>
  </target>

  <!--
    Generate distribution export directories (Copy files)
  -->
  <target name="export" depends="clean-build,project-revision,papaya-revision" description="Export distribution" hidden="true">
    <echo message="Prepare export directory"/>
    <mkdir dir="${directory.export}/source"/>
    <echo message="Copy files"/>
    <copy todir="${directory.export}/source/htdocs">
      <fileset refid="public"/>
    </copy>
    <copy todir="${directory.export}/source">
      <fileset refid="source"/>
      <fileset refid="dependencies"/>
    </copy>
    <echo message="Create configuration file"/>
    <property name="config.template" value="${directory.src}/dist.papaya.php"/>
    <property name="config.file" value="${directory.export}/source/papaya.php"/>
    <property name="papaya.database.uri" value="${dist.database.uri}"/>
    <property name="papaya.development.active" value="(bool)FALSE"/>
    <copy file="${config.template}" tofile="${config.file}">
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>
    <echo message="Run dependencies-install --no-interaction --no-dev install"/>
    <exec executable="${executable.composer}" passthru="true">
      <arg value="install"/>
      <arg value="--no-interaction"/>
      <arg value="--no-dev"/>
      <arg value="--working-dir"/>
      <arg path="${directory.export}/source"/>
    </exec>
    <append
      destFile="${directory.document-root}/revision.inc.php"
      append="false"
      overwrite="true"
      text="&lt;?php&#10;define('PAPAYA_WEBSITE_REVISION', '${revision.project}');&#10;define('PAPAYA_VERSION_STRING', '${revision.papaya}');&#10;"/>
  </target>

  <!--
    Fetch revisions and store them in a PHP file
  -->
  <target name="fetch-revisions" depends="project-revision, papaya-revision" hidden="true">
    <append
      destFile="${directory.document-root}/revision.inc.php"
      append="false"
      overwrite="true"
      text="&lt;?php&#10;define('PAPAYA_WEBSITE_REVISION', '${revision.project}');&#10;define('PAPAYA_VERSION_STRING', '${revision.papaya}');&#10;"/>
  </target>

  <!--
    Determine the project code revision from Git metadata
   -->
  <target name="project-revision" description="Get project revision from git" hidden="true">
    <trycatch property="vcs.error">
      <try>
        <if>
          <available file=".git" type="dir"/>
          <then>
            <property name="revision.project" value="dev"/>
            <exec executable="${executable.git}" returnProperty="git.return" outputProperty="git.output"
                  dir="${project.basedir}">
              <arg line="describe --tags"/>
            </exec>
            <if>
              <equals arg1="${git.return}" arg2="0"/>
              <then>
                <property name="revision.project" value="${git.output}" override="true"/>
              </then>
            </if>
            <property name="revision.project.suffix" value="-${revision.project}"/>
          </then>
          <else>
            <property name="revision.project" value="dev" override="true"/>
          </else>
        </if>
        <echo message="Current revision: ${revision.project}"/>
      </try>
      <catch>
        <echo level="warning">There was an error while reading revision information. Current revision is
          unknown.
        </echo>
        <echo level="warning">Please make sure that the git executable is available.</echo>
        <echo level="debug">${vcs.error}</echo>
        <property name="revision.project" value="unknown" override="true"/>
      </catch>
    </trycatch>
  </target>

  <target name="papaya-revision" hidden="true">
    <property name="revision.papaya" value=""/>
    <trycatch property="error">
      <try>
        <adhoc-task name="dependencies-install-version">
          <![CDATA[
        class PapayaVersionTask extends Task {

          function main() {
            $json = json_decode(file_get_contents("composer.lock"));
            foreach ($json->packages as $package) {
              if ($package->name === 'papaya/cms-core') {
                $this->project->setProperty(
                  'revision.papaya', $package->version.' '.substr($package->source->reference, 0, 8)
                );
              }
            }
          }
        }
        ]]>
        </adhoc-task>
        <dependencies-install-version/>
        <echo message="Papaya revision: ${revision.papaya}"/>
      </try>
      <catch>
        <echo level="warning">There was an error while reading papaya core version information.</echo>
        <echo level="debug">${error}</echo>
        <property name="revision.project" value="unknown" override="true"/>
      </catch>
    </trycatch>
  </target>

</project>
